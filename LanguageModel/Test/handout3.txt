Details about discussed graph method is present at the end.

Problem: Transposition Matrix 

Training Corpus Details:
   Character Count: 664561 (After removing spaces)

Methodology:

	Scoring:
 

	 0) For calculating bi-gram/trigram models I have truncated all spaces from corpus. For a new sentence I have '.' as preceeding character before the first word.

	 1) Calculate matrix of bigram pairs.
	 2) Calculate matrix of Trigram Pairs.

	Searching:
	 0) I have used greedy approach for searching the decipher sequence by selecting best trigram pairs..
	 1) I find 50 sequences based on above greedy approach by choosing each column in given cipher text as 1st column and then compute the rest.


Smoothing method used:
 A. Linear Interpolation:

    1. Trigram Pair parameters:
    	l1 = 0.98
    	l2 = 0.0199

    2. Bigram Pair paramters:
         l1=0.9999

:: Results ::

1. Score of valid non-permuted sample text:
                            
                        Text                                   Trigram Score

    'thepanelisalsoexpectedtorecommendthatthewhitehouse', 1.8153793328033858e-29
	'theiraniangovernmenthasmaintainedthatitknowsnothin', 3.1569744581080074e-32
	'bymatchingthelowestpriceandenhancingservicehewasde', 5.5819857935869875e-36
	'thisfallherneighborhoodinthenortheasternpartofthis', 4.958188998944315e-34
	'forcollegebasketballfansthisisasgoodaweekasyourego', 6.853178871982857e-40
	'butaccordingtobarbershopproprietorsthenumberoffema', 7.2247952345661034e-34
	'anintriguingnewstudysuggeststhatwhatreallydrawspeo', 4.173345852848206e-40
	'alsoonthursdaythelatestwinnersofthelifesciencesand', 8.85374820616035e-36
	'whatmembersofbothpartiesbemoanedmorethananythingwa', 1.787366120783384e-36
	'onekeyhurdleforteslainproducingthenewsmallercarwil'  4.9129452394211025e-40

	 Overall Text score by taking log: sum = -807.2719773116299

2. Score and search sequence of permuted valid sample text:

                      Text                                             Trigram Score

	'tommendthatthedtorecepanelisalsoexpectisehouthehwe',          2.213573515669843e-32
	'ttainedthatithasmaineiraniangovernmenswinoththnonk',          4.475152127810643e-36
	'penhancingserriceandmatchingthelowesthedewasbyeciv',          7.389514590448439e-36
	'henortheasteroodinthisfallherneighbortriofththsapn',          2.007188438073337e-38
	'lsisasgoodawefansthircollegebasketbalysgourefooake',          4.887850994289774e-44
	'rprietorsthenshopprotaccordingtobarberemoffebuabmu',          2.9891892038307433e-40
	'ysthatwhatreasuggestintriguingnewstudrdeawspanoyll',          8.540105778713743e-43
	'tersofthelifeestwinnsoonthursdaythelanencesaaldics',          8.431008005930981e-41
	'roanedmorethatiesbematmembersofbothpatywhingwhanan',          8.016152975435753e-36
	'acingthenewsminproduekeyhurdleforteslreicarwonllla'           1.940490504783726e-43


	'sum': -881.0128115816301 
	'seq': [19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 20, 21, 22, 23, 24, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 43, 42, 48, 44, 45, 46, 47, 0, 1, 49, 41, 40, 39]}

	If I give any permuted input of valid sample test I get the above decipher text.

3. Results of test cipher:

 Cipher text:
   NEW_TEST = [
	'dtjmeoftumhbhstehresweseeoatearthkteoouietohfyetri',
	'ehsinaeinctnecfdbouunuetomltoimtonsrsihyeognrcfesi',
	'heldoehwaenwkleomnaegnonwefrimimynhenopngotiwymltt',
	'ikthgatysiowiitdeedrofeeyexonroaneitthtntsnhleofhc',
	'oslmnemjrtoebeftegernesioiweayksphluethuaraeahafth',
	'nfiehtuohugiandettheeoartttrbeybuiohvsatsdousnwona',
	'sltaeytgnnhaatgoehtkssulttroleulenaofiolgtwanlleli',
	'wmlptepmsttoehwchhieiavoehikrnwthaterecnltewacwele',
	'icnoovslantrebdweoifseundstntewanhioottaeatairetds',
	'cggoarrhsdewarhtipntiiretnowrddcahipwtgneoeboeldwa',] 


 Decipher result:

 					Text                                               Trigram Score

	'thetotheeekerhejoyoutofhesaidtbesomsemuferwathittr',         1.0197857738450811e-41
	'toosmentodnesbusicantgetrelieonfusicuchrnonifeyhim',         2.0604173356396309e-47
	'mywheliniongtmaloyearthneofthowmendlnepwongmeknewi',         4.118252990768212e-41
	'anyiefhendethedtheasontotexcisworthifitlgeortinkyo',         1.513453053551461e-39
	'spolifeiathateelthereamouswhorearemeethangnyfbusjk',         3.983402376230706e-46
	'butotourbeisnthisnthroughatandiwevenouashteedatfoy',         7.457094496349349e-39
	'letateallonglettilynowthouristalkfatsnonehsegallgu',         5.874914878533171e-43
	'thetheworcallhileceskepteviewtowerphatcathinwenmmw',         2.643869740286041e-42
	'andistantwhedeintrvantstoutsiarefoobentioosedeaclw',         1.1049970974402114e-38
	'catindberthewingterswereproacowltworidgoapidhanghd'          5.87301342505947e-41

  'sum': -949.6012117943361, 
  'seq': [31, 32, 24, 34, 25, 47, 43, 23, 28, 15, 33, 40, 48, 16, 18, 2, 37, 45, 5, 8, 27, 42, 6, 10, 35, 22, 26, 49, 0, 41, 11, 46, 19, 36, 3, 13, 21, 9, 38, 44, 4, 17, 20, 29, 14, 12, 39, 1, 7, 30]

  Further Enhancement:
  
  1. Above score was the best possible result that could be acheived by greedy approach. Among 50 result sequence based on the 1st selected column in decipher text, above decipher is the best result.

  2. Based on 50 sequences I tried to go for pattern matching between the 50 deciphered sequence. I generated all substring based on all combination (50C2).

  3. Result of above step I got all the possible branches that appeared in deciphered 50 sequences for each node with the weight of sequence as number of times that sequence appeared in all combination.

  Can I try:

  1. I am pretty sure that greedy will just get me to a certain sequence which will of course not be perfect deciphered text.

  2. Based on substring and 50 deciphered sequences I can generate a graph which has edges between nodes forming a path based sequnece of deciphered text. I will have weight as the score that I got for substring matching algorithm.

  3. With above graph formation I will get all possible branches for a particular node i.e ( column in cipher text).



Output Sample:

1. Output of substring matching:
 ('35-22-26-', 354)

 ('5-8-27-42-6-', 292)

 ('25-47-43-', 286)

 ('5-', 273)

 ('36-3-', 267)

 ('37-33-40-48-34-25-47-43-', 44)
 ..
 ..
 .

Graph Method Result:
The forward and backward adjacency list are generated from 50 sequences generated from trigram language modelling with the help of greedy algorithm.

Forward Mapping Sample:
0 : [(35, 26), (14, 17), (41, 5), (4, 1), (20, 1)]
Description:
0->35 have occurred 26 times
0->14 has occurred 17 times
0->41 has occurred 5 times.
0->4 has occurred once.
0->20 has occurred once.


Forward Mapping (giving to 0---->35 has occurred 26 times)

0 : [(35, 26), (14, 17), (41, 5), (4, 1), (20, 1)]
1 : [(7, 23), (12, 11), (30, 5), (36, 4), (14, 2), (16, 1)]
2 : [(24, 14), (37, 4), (10, 4), (14, 4), (12, 3), (28, 3), (1, 2), (46, 2), (21, 1), (36, 1), (7, 1), (45, 1), (5, 1)]
3 : [(5, 10), (11, 8), (36, 7), (44, 4), (13, 4), (46, 4), (23, 4), (16, 3), (28, 3), (24, 2), (27, 1)]
4 : [(17, 47), (24, 1), (23, 1), (9, 1)]
5 : [(8, 43), (44, 6), (18, 1)]
6 : [(37, 22), (10, 16), (5, 7), (44, 2), (28, 2), (3, 1)]
7 : [(30, 22), (46, 6), (1, 3), (16, 3), (10, 2), (45, 2), (2, 1), (43, 1), (44, 1), (21, 1)]
8 : [(27, 43), (20, 2), (38, 1), (42, 1), (11, 1), (21, 1), (23, 1)]
9 : [(49, 23), (38, 18), (28, 4), (26, 2), (40, 1), (16, 1), (23, 1)]
10 : [(4, 14), (35, 10), (18, 4), (3, 4), (29, 4), (39, 3), (30, 3), (47, 2), (32, 1), (1, 1), (2, 1), (19, 1), (12, 1), (14, 1)]
11 : [(45, 27), (28, 8), (46, 7), (37, 3), (7, 2), (39, 1), (21, 1), (23, 1)]
12 : [(39, 21), (1, 9), (46, 8), (36, 4), (2, 3), (21, 2), (43, 1), (28, 1), (30, 1)]
13 : [(41, 29), (49, 7), (21, 6), (37, 4), (5, 2), (32, 1), (12, 1)]
14 : [(12, 12), (30, 8), (37, 6), (10, 5), (16, 5), (7, 3), (26, 2), (3, 1)]
15 : [(33, 16), (21, 15), (16, 9), (44, 6), (36, 3), (23, 1)]
16 : [(18, 19), (19, 13), (21, 4), (29, 4), (12, 2), (44, 2), (14, 2), (31, 2), (35, 1), (39, 1)]
17 : [(24, 17), (19, 16), (35, 9), (20, 2), (1, 1), (42, 1), (44, 1), (18, 1), (21, 1), (26, 1)]
18 : [(2, 24), (38, 8), (29, 7), (10, 4), (31, 4), (23, 3)]
19 : [(36, 26), (16, 12), (44, 7), (29, 3), (7, 1), (27, 1)]
20 : [(39, 18), (15, 14), (29, 6), (10, 6), (2, 2), (36, 2), (12, 1), (42, 1)]
21 : [(9, 23), (31, 10), (10, 6), (29, 4), (45, 2), (2, 1), (3, 1), (8, 1), (20, 1), (30, 1)]
22 : [(26, 39), (23, 11)]
23 : [(28, 26), (41, 11), (3, 6), (37, 3), (48, 2), (22, 2)]
24 : [(4, 25), (20, 7), (15, 6), (21, 5), (34, 3), (35, 3), (18, 1)]
25 : [(47, 47), (18, 2), (37, 1)]
26 : [(38, 20), (49, 19), (11, 4), (7, 2), (30, 2), (0, 1), (2, 1)]
27 : [(42, 44), (19, 4), (21, 1), (14, 1)]
28 : [(20, 24), (15, 24), (34, 1), (37, 1)]
29 : [(45, 14), (14, 13), (31, 11), (9, 3), (1, 2), (44, 2), (16, 2), (48, 1), (20, 1), (41, 1)]
30 : [(2, 8), (14, 6), (1, 5), (7, 3), (26, 3), (10, 1), (46, 1), (12, 1), (21, 1), (29, 1)]
31 : [(32, 47), (12, 2), (29, 1)]
32 : [(46, 21), (18, 13), (24, 12), (21, 2), (44, 1), (16, 1)]
33 : [(40, 48), (41, 1), (21, 1)]
34 : [(25, 33), (5, 15), (28, 2)]
35 : [(22, 47), (3, 3)]
36 : [(3, 33), (7, 7), (12, 3), (42, 2), (20, 2), (2, 1), (38, 1), (19, 1)]
37 : [(33, 33), (44, 11), (45, 3), (8, 2), (31, 1)]
38 : [(13, 22), (16, 7), (44, 5), (27, 4), (11, 3), (18, 3), (24, 3), (2, 1), (12, 1), (17, 1)]
39 : [(1, 18), (31, 10), (9, 7), (20, 7), (4, 4), (37, 2), (2, 1), (30, 1)]
40 : [(48, 46), (37, 3), (9, 1)]
41 : [(11, 30), (25, 15), (10, 5)]
42 : [(6, 43), (41, 2), (4, 2), (31, 2), (8, 1)]
43 : [(23, 26), (13, 22), (1, 1), (12, 1)]
44 : [(9, 14), (6, 6), (29, 6), (2, 5), (7, 5), (15, 5), (4, 3), (31, 3), (39, 2), (30, 1)]
45 : [(5, 14), (12, 6), (21, 6), (31, 6), (18, 5), (39, 3), (11, 2), (7, 2), (26, 2), (1, 1), (44, 1), (16, 1), (17, 1)]
46 : [(19, 14), (29, 13), (1, 6), (30, 5), (12, 4), (14, 3), (20, 2), (8, 1), (11, 1), (21, 1)]
47 : [(43, 47), (36, 2), (8, 1)]
48 : [(34, 45), (16, 4), (38, 1)]
49 : [(0, 48), (25, 1), (13, 1)]


<-------------------------------------------------------------------------------------------------------------------------->

Reverse Mapping:( getting from src<---dst)

Sample:
0 : [(49, 48), (26, 1)]
Description:
49->0 occurred 48 times.
26->0 occurred once.


0 : [(49, 48), (26, 1)]

1 : [(39, 18), (12, 9), (46, 6), (30, 5), (7, 3), (2, 2), (29, 2), (43, 1), (10, 1), (45, 1), (17, 1)]

2 : [(18, 24), (30, 8), (44, 5), (12, 3), (20, 2), (36, 1), (38, 1), (7, 1), (10, 1), (39, 1), (21, 1), (26, 1)]
3 : [(36, 33), (23, 6), (10, 4), (35, 3), (6, 1), (14, 1), (21, 1)]
4 : [(24, 25), (10, 14), (39, 4), (44, 3), (42, 2), (0, 1)]

5 : [(34, 15), (45, 14), (3, 10), (6, 7), (13, 2), (2, 1)]

6 : [(42, 43), (44, 6)]
7 : [(1, 23), (36, 7), (44, 5), (14, 3), (30, 3), (11, 2), (45, 2), (26, 2), (2, 1), (19, 1)]
8 : [(5, 43), (37, 2), (42, 1), (46, 1), (47, 1), (21, 1)]
9 : [(21, 23), (44, 14), (39, 7), (29, 3), (4, 1), (40, 1)]
10 : [(6, 16), (20, 6), (21, 6), (41, 5), (14, 5), (2, 4), (18, 4), (7, 2), (30, 1)]
11 : [(41, 30), (3, 8), (26, 4), (38, 3), (45, 2), (8, 1), (46, 1)]
12 : [(14, 12), (1, 11), (45, 6), (46, 4), (2, 3), (36, 3), (16, 2), (31, 2), (38, 1), (10, 1), (43, 1), (13, 1), (20, 1), (30, 1)]
13 : [(43, 22), (38, 22), (3, 4), (49, 1)]
14 : [(0, 17), (29, 13), (30, 6), (2, 4), (46, 3), (1, 2), (16, 2), (10, 1), (27, 1)]
15 : [(28, 24), (20, 14), (24, 6), (44, 5)]
16 : [(19, 12), (15, 9), (38, 7), (14, 5), (48, 4), (3, 3), (7, 3), (29, 2), (32, 1), (1, 1), (9, 1), (45, 1)]
17 : [(4, 47), (45, 1), (38, 1)]
18 : [(16, 19), (32, 13), (45, 5), (10, 4), (38, 3), (25, 2), (5, 1), (17, 1), (24, 1)]
19 : [(17, 16), (46, 14), (16, 13), (27, 4), (36, 1), (10, 1)]
20 : [(28, 24), (39, 7), (24, 7), (36, 2), (8, 2), (46, 2), (17, 2), (0, 1), (21, 1), (29, 1)]
21 : [(15, 15), (45, 6), (13, 6), (24, 5), (16, 4), (32, 2), (12, 2), (33, 1), (2, 1), (7, 1), (8, 1), (11, 1), (46, 1), (17, 1), (27, 1), (30, 1)]
22 : [(35, 47), (23, 2)]
23 : [(43, 26), (22, 11), (3, 4), (18, 3), (4, 1), (8, 1), (9, 1), (15, 1), (11, 1)]
24 : [(17, 17), (2, 14), (32, 12), (38, 3), (3, 2), (4, 1)]
25 : [(34, 33), (41, 15), (49, 1)]
26 : [(22, 39), (30, 3), (9, 2), (45, 2), (14, 2), (17, 1)]
27 : [(8, 43), (38, 4), (19, 1), (3, 1)]
28 : [(23, 26), (11, 8), (9, 4), (2, 3), (3, 3), (6, 2), (34, 2), (12, 1)]
29 : [(46, 13), (18, 7), (44, 6), (20, 6), (10, 4), (16, 4), (21, 4), (19, 3), (30, 1), (31, 1)]
30 : [(7, 22), (14, 8), (1, 5), (46, 5), (10, 3), (26, 2), (12, 1), (39, 1), (44, 1), (21, 1)]
31 : [(29, 11), (39, 10), (21, 10), (45, 6), (18, 4), (44, 3), (42, 2), (16, 2), (37, 1)]
32 : [(31, 47), (10, 1), (13, 1)]
33 : [(37, 33), (15, 16)]
34 : [(48, 45), (24, 3), (28, 1)]
35 : [(0, 26), (10, 10), (17, 9), (24, 3), (16, 1)]
36 : [(19, 26), (3, 7), (1, 4), (12, 4), (15, 3), (20, 2), (47, 2), (2, 1)]
37 : [(6, 22), (14, 6), (2, 4), (13, 4), (40, 3), (11, 3), (23, 3), (39, 2), (25, 1), (28, 1)]
38 : [(26, 20), (9, 18), (18, 8), (36, 1), (8, 1), (48, 1)]
39 : [(12, 21), (20, 18), (10, 3), (45, 3), (44, 2), (11, 1), (16, 1)]
40 : [(33, 48), (9, 1)]
41 : [(13, 29), (23, 11), (0, 5), (42, 2), (33, 1), (29, 1)]
42 : [(27, 44), (36, 2), (8, 1), (17, 1), (20, 1)]
43 : [(47, 47), (7, 1), (12, 1)]
44 : [(37, 11), (19, 7), (5, 6), (15, 6), (38, 5), (3, 4), (6, 2), (16, 2), (29, 2), (32, 1), (7, 1), (45, 1), (17, 1)]
45 : [(11, 27), (29, 14), (37, 3), (7, 2), (21, 2), (2, 1)]
46 : [(32, 21), (12, 8), (11, 7), (7, 6), (3, 4), (2, 2), (30, 1)]
47 : [(25, 47), (10, 2)]
48 : [(40, 46), (23, 2), (29, 1)]
49 : [(9, 23), (26, 19), (13, 7)]
